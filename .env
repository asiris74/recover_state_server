# rename this example file to `.env` and put it in the current directory

# [rust]
# Config the log level, see https://docs.rs/env_logger/0.9.1/env_logger/#enabling-logging
# For local development, we could set "sqlx::query=info" to see sql output details
# Or just set RUST_LOG="debug" to see more detail logs
# For testnet or mainnet, we should set "sqlx::query=error" to reduce sqlx log output
RUST_LOG="info,sqlx::query=error"

# [runtime]
# ZKLINK HOME path for some data files
RUNTIME_CONFIG_ZKLINK_HOME="/path/zklink"
# Current directory for the circuit keys.
RUNTIME_CONFIG_KEY_DIR="/path/zklink/keys/contracts-4"

# [api]
API_CONFIG_SERVER_HTTP_PORT=8080

# [database]
# set `USER_NAME`, `HOST` of database url to your postgresql user name
DATABASE_URL="postgres://USER_NAME@HOST/plasma"
# Amount of open connections to the database.
DATABASE_POOL_SIZE=10

# [chains]
# Chains that supported, the chain id is defined by zkLink
# We can add new chains, but can't drop an exist chain, that means
# We could set this option to "1,2" and then add a new chain(3)
# But we could not drop chain(1) or chain(2)
# NOTE, the max value of `CHAIN_IDS` must not be greater than `MAX_CHAIN_ID` defined in `params.rs`
CHAIN_IDS=1,2

# [chain_1.chain]
# Chain id defined by zkLink, must be equal to the placeholder of `CHAIN_{CHAIN_ID}_CHAIN_ID`
CHAIN_1_CHAIN_ID=1
# Layer one chain type, for example, the chain type of Ethereum is EVM
CHAIN_1_CHAIN_TYPE=EVM
# Gas token price symbol
CHAIN_1_GAS_TOKEN=MATIC
# Whether sender should commit compressed block
# It must be keep same with the constant `ENABLE_COMMIT_COMPRESSED_BLOCK` defined in zkLink contract
CHAIN_1_IS_COMMIT_COMPRESSED_BLOCKS=true

# [chain_1.CONTRACT]
# The block number of CONTRACT deployed
CHAIN_1_CONTRACT_DEPLOYMENT_BLOCK=32640103
# The zkLink main contract address
CHAIN_1_CONTRACT_ADDRESS="0xb404593d990D8AfCCF40FD9c5A0F906e1e1c77A1"
# The zkLink contract deployed tx hash, used for recover data
CHAIN_1_CONTRACT_GENESIS_TX_HASH="0xc4097fc29bcc634ffd7b446de324cbcbd9ec38e3f8a2d29d6a8647a1933fa2ce"

# [chain_1.client]
# Chain id defined in layer one
CHAIN_1_CLIENT_CHAIN_ID=80001
# RPC Server url of blockchain1.
CHAIN_1_CLIENT_WEB3_URL="https://rpc.ankr.com/polygon_mumbai	"
# The rpc service provider asked for a delay in the request because the number of requests was too frequent.
# It is configured according to the documentation of the rpc service
# The default configuration comes from the Infura docs(https://docs.infura.io/infura/networks/ethereum/how-to/avoid-rate-limiting).
CHAIN_1_CLIENT_REQUEST_RATE_LIMIT_DELAY=30

# [chain_2.chain]
# Chain id defined by zkLink, must be equal to the placeholder of `CHAIN_{CHAIN_ID}_CHAIN_ID`
CHAIN_2_CHAIN_ID=2
# Layer one chain type, for example, the chain type of Ethereum is EVM
CHAIN_2_CHAIN_TYPE=EVM
# Gas token price symbol
CHAIN_2_GAS_TOKEN=AVAX
# Whether sender should commit compressed block
# It must be keep same with the constant `ENABLE_COMMIT_COMPRESSED_BLOCK` defined in zkLink contract
CHAIN_2_IS_COMMIT_COMPRESSED_BLOCKS=false

# [chain_2.CONTRACT]
# The block number of CONTRACT deployed
CHAIN_2_CONTRACT_DEPLOYMENT_BLOCK=19461005
# The zkLink main contract address
CHAIN_2_CONTRACT_ADDRESS="0x2a038A0549d63Fa95A87a84662C9e24358B4f81F"
# The zkLink contract deployed tx hash, used for recover data
CHAIN_2_CONTRACT_GENESIS_TX_HASH="0xad43f79c5c4ccec464dc86e02a0f305ef75b21c0943a18358451975ada40012f"

# [chain_2.client]
# Chain id defined in layer one
CHAIN_2_CLIENT_CHAIN_ID=43113
# RPC Server url of blockchain1.
#CHAIN_2_CLIENT_WEB3_URL="https://rpc.ankr.com/avalanche_fuji"
CHAIN_2_CLIENT_WEB3_URL="https://api.avax-test.network/ext/bc/C/rpc"
# The rpc service provider asked for a delay in the request because the number of requests was too frequent.
# It is configured according to the documentation of the rpc service
# The default configuration comes from the Infura docs(https://docs.infura.io/infura/networks/ethereum/how-to/avoid-rate-limiting).
CHAIN_2_CLIENT_REQUEST_RATE_LIMIT_DELAY=30

# Core applications settings
# [prover.core]
# Timeout(in Milliseconds) to consider prover gone.
PROVER_CORE_GONE_TIMEOUT=60000
# Amount of provers in the cluser if there is no pending jobs.
PROVER_CORE_IDLE_PROVERS=1